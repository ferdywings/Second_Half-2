states_sf    <- st_as_sf(states_clean,coords = c("longitude","latitude"), crs = 4326)
countries_sf <- st_as_sf(countries,  coords = c("longitude","latitude"), crs = 4326)
# 5. Plot semua kota ---------------------------------------------------------
plot(st_geometry(cities_sf), pch = 20, col = "red", main = "Semua Kota")
# 6. Filter Afghanistan ------------------------------------------------------
af_cities_sf <- filter(cities_sf, country_name == "Afghanistan")
af_states_sf <- filter(states_sf,  country_name == "Afghanistan")
plot(st_geometry(af_cities_sf), pch = 20, col = "blue", main = "Kota di Afghanistan")
# 7. Tambah variabel dummy elevasi -------------------------------------------
set.seed(123)
af_cities_sf$elevation <- runif(nrow(af_cities_sf), 500, 3000)
# 8. Konversi sf → Spatial untuk gstat ---------------------------------------
af_cities_sp <- as(af_cities_sf, "Spatial")
# 9. Variogram & fitting -----------------------------------------------------
vgm_emp <- variogram(elevation ~ 1, data = af_cities_sp)
vgm_fit <- fit.variogram(
vgm_emp,
model = vgm(
psill  = max(vgm_emp$gamma, na.rm=TRUE)/2,
model  = "Sph",
range  = max(vgm_emp$dist,  na.rm=TRUE)/3,
nugget = min(vgm_emp$gamma, na.rm=TRUE)
)
)
plot(vgm_emp, vgm_fit, main = "Empirical & Fitted Variogram")
# 10. Buat grid prediksi dengan terra + raster -------------------------------
bb      <- st_bbox(af_cities_sf)
ext_af  <- ext(bb["xmin"] - 0.5, bb["xmax"] + 0.5,
bb["ymin"] - 0.5, bb["ymax"] + 0.5)
r_terra <- rast(ext_af, resolution = 0.01, crs = crs(af_cities_sf))
r_raster<- raster(r_terra)
grid_sp <- as(r_raster, "SpatialGridDataFrame")
# 11. Ordinary Kriging -------------------------------------------------------
krig_sp <- krige(
formula   = elevation ~ 1,
locations = af_cities_sp,
newdata   = grid_sp,
model     = vgm_fit
)
# 12. Konversi hasil ke raster terra -----------------------------------------
pred_rast <- rast(r_terra); values(pred_rast) <- krig_sp$var1.pred
var_rast  <- rast(r_terra); values(var_rast)  <- krig_sp$var1.var
# 13. Plot hasil kriging -----------------------------------------------------
plot(pred_rast, main = "Elevasi (Ordinary Kriging)")
plot(var_rast,  main = "Variance Kriging")
# 14. Interpolasi alternatif: IDW ---------------------------------------------
idw_sp    <- idw(elevation ~ 1, af_cities_sp, newdata = grid_sp, idp = 2.5)
idw_rast  <- rast(r_terra); values(idw_rast) <- idw_sp$var1.pred
plot(idw_rast, main = "Elevasi (IDW)")
# 15. Bandingkan Kriging vs IDW ----------------------------------------------
par(mfrow = c(1,2))
plot(pred_rast, main = "Kriging")
plot(idw_rast,  main = "IDW")
par(mfrow = c(1,1))
# 16. Visualisasi interaktif ------------------------------------------------
mapview(pred_rast, layer.name = "Kriging Elevasi") +
mapview(af_cities_sf, color = "red", cex = 5, layer.name = "Kota")
# 17. Validasi silang --------------------------------------------------------
cv <- krige.cv(elevation ~ 1, af_cities_sp, model = vgm_fit)
print(summary(cv))
plot(cv$observed, cv$pred,
main = "Observed vs Predicted",
xlab = "Observed", ylab = "Predicted")
abline(0,1, col = "red")
# 18. Peta akhir dengan ggplot2 ---------------------------------------------
krig_df <- as.data.frame(krig_sp)
ggplot() +
geom_raster(data = krig_df,
aes(x = coords.x1, y = coords.x2, fill = var1.pred)) +
geom_point(data = af_cities_sf,
aes(x = longitude, y = latitude),
color = "black", size = 1.5) +
scale_fill_viridis_c(name = "Elevasi (m)") +
coord_fixed() +
labs(title = "Interpolasi Elevasi di Afghanistan (Kriging)") +
theme_minimal()
# 0. Instalasi paket jika belum terpasang ------------------------------------
required_packages <- c(
"sf", "terra", "raster", "gstat", "ggplot2",
"dplyr", "mapview", "readr", "sp"
)
new_pkgs <- setdiff(required_packages, rownames(installed.packages()))
if (length(new_pkgs)) install.packages(new_pkgs)
# 1. Muat library ------------------------------------------------------------
library(sf)
library(terra)
library(raster)   # untuk koersi ke SpatialGridDataFrame
library(gstat)
library(ggplot2)
library(dplyr)
library(mapview)
library(readr)
library(sp)
# 2. Baca data ---------------------------------------------------------------
cities    <- read_csv("E:/jurnal sig/geolocation data/cities.csv")
countries <- read_csv("E:/jurnal sig/geolocation data/countries.csv")
states    <- read_csv("E:/jurnal sig/geolocation data/states.csv")
# 3. Bersihkan NA pada states ------------------------------------------------
states_clean <- states %>%
filter(!is.na(latitude) & !is.na(longitude))
cat("States: before =", nrow(states), "after =", nrow(states_clean), "\n")
# 4. Konversi ke sf ----------------------------------------------------------
cities_sf    <- st_as_sf(cities,     coords = c("longitude","latitude"), crs = 4326)
states_sf    <- st_as_sf(states_clean,coords = c("longitude","latitude"), crs = 4326)
countries_sf <- st_as_sf(countries,  coords = c("longitude","latitude"), crs = 4326)
# 5. Plot semua kota ---------------------------------------------------------
plot(st_geometry(cities_sf), pch = 20, col = "red", main = "Semua Kota")
# 6. Filter Afghanistan ------------------------------------------------------
af_cities_sf <- filter(cities_sf, country_name == "Afghanistan")
af_states_sf <- filter(states_sf,  country_name == "Afghanistan")
plot(st_geometry(af_cities_sf), pch = 20, col = "blue", main = "Kota di Afghanistan")
# 7. Tambah variabel dummy elevasi -------------------------------------------
set.seed(123)
af_cities_sf$elevation <- runif(nrow(af_cities_sf), 500, 3000)
# 8. Konversi sf → Spatial untuk gstat ---------------------------------------
af_cities_sp <- as(af_cities_sf, "Spatial")
# 9. Variogram & fitting -----------------------------------------------------
vgm_emp <- variogram(elevation ~ 1, data = af_cities_sp)
vgm_fit <- fit.variogram(
vgm_emp,
model = vgm(
psill  = max(vgm_emp$gamma, na.rm=TRUE)/2,
model  = "Sph",
range  = max(vgm_emp$dist,  na.rm=TRUE)/3,
nugget = min(vgm_emp$gamma, na.rm=TRUE)
)
)
plot(vgm_emp, vgm_fit, main = "Empirical & Fitted Variogram")
# 10. Buat grid prediksi dengan terra + raster -------------------------------
bb       <- st_bbox(af_cities_sf)
ext_af   <- ext(bb["xmin"] - 0.5, bb["xmax"] + 0.5,
bb["ymin"] - 0.5, bb["ymax"] + 0.5)
r_terra  <- rast(ext_af, resolution = 0.01, crs = crs(af_cities_sf))
r_raster <- raster(r_terra)
grid_sp  <- as(r_raster, "SpatialGridDataFrame")  # untuk gstat
# 11. Ordinary Kriging -------------------------------------------------------
krig_sp <- krige(
formula   = elevation ~ 1,
locations = af_cities_sp,
newdata   = grid_sp,
model     = vgm_fit
)
# 12. Konversi hasil ke raster terra -----------------------------------------
pred_rast <- rast(r_terra); values(pred_rast) <- krig_sp$var1.pred
var_rast  <- rast(r_terra); values(var_rast)  <- krig_sp$var1.var
# 13. Plot hasil kriging -----------------------------------------------------
plot(pred_rast, main = "Elevasi (Ordinary Kriging)")
plot(var_rast,  main = "Variance Kriging")
# 14. Interpolasi alternatif: IDW ---------------------------------------------
idw_sp   <- idw(elevation ~ 1, af_cities_sp, newdata = grid_sp, idp = 2.5)
idw_rast <- rast(r_terra); values(idw_rast) <- idw_sp$var1.pred
plot(idw_rast, main = "Elevasi (IDW)")
# 15. Bandingkan Kriging vs IDW ----------------------------------------------
par(mfrow = c(1,2))
plot(pred_rast, main = "Kriging")
plot(idw_rast,  main = "IDW")
par(mfrow = c(1,1))
# 16. Visualisasi interaktif ------------------------------------------------
mapview(pred_rast, layer.name = "Kriging Elevasi") +
mapview(af_cities_sf, color = "red", cex = 5, layer.name = "Kota")
# 17. Validasi silang --------------------------------------------------------
cv <- krige.cv(elevation ~ 1, af_cities_sp, model = vgm_fit)
print(summary(cv))
plot(cv$observed, cv$pred,
main = "Observed vs Predicted",
xlab = "Observed", ylab = "Predicted")
abline(0,1, col = "red")
# 18. Peta akhir dengan ggplot2 ---------------------------------------------
# Konversi raster prediksi ke data.frame
pred_df <- as.data.frame(pred_rast, xy = TRUE, na.rm = TRUE)
ggplot(pred_df, aes(x = x, y = y, fill = var1.pred)) +
geom_raster() +
geom_point(data = af_cities_sf,
aes(x = longitude, y = latitude),
color = "black", size = 1.5) +
scale_fill_viridis_c(name = "Elevasi (m)") +
coord_fixed() +
labs(title = "Interpolasi Elevasi di Afghanistan (Kriging)") +
theme_minimal()
# 0. Instalasi paket jika belum terpasang ------------------------------------
required_packages <- c(
"sf", "terra", "raster", "gstat", "ggplot2",
"dplyr", "mapview", "readr", "sp"
)
new_pkgs <- setdiff(required_packages, rownames(installed.packages()))
if (length(new_pkgs)) install.packages(new_pkgs)
# 1. Muat library ------------------------------------------------------------
library(sf)
library(terra)
library(raster)   # untuk koersi ke SpatialGridDataFrame
library(gstat)
library(ggplot2)
library(dplyr)
library(mapview)
library(readr)
library(sp)
# 2. Baca data ---------------------------------------------------------------
cities    <- read_csv("E:/jurnal sig/geolocation data/cities.csv")
countries <- read_csv("E:/jurnal sig/geolocation data/countries.csv")
states    <- read_csv("E:/jurnal sig/geolocation data/states.csv")
# 3. Bersihkan NA pada states ------------------------------------------------
states_clean <- states %>%
filter(!is.na(latitude) & !is.na(longitude))
cat("States: before =", nrow(states), "after =", nrow(states_clean), "\n")
# 4. Konversi ke sf ----------------------------------------------------------
cities_sf    <- st_as_sf(cities,     coords = c("longitude","latitude"), crs = 4326)
states_sf    <- st_as_sf(states_clean,coords = c("longitude","latitude"), crs = 4326)
countries_sf <- st_as_sf(countries,  coords = c("longitude","latitude"), crs = 4326)
# 5. Plot semua kota ---------------------------------------------------------
plot(st_geometry(cities_sf), pch = 20, col = "red", main = "Semua Kota")
# 6. Filter Afghanistan ------------------------------------------------------
af_cities_sf <- filter(cities_sf, country_name == "Afghanistan")
af_states_sf <- filter(states_sf,  country_name == "Afghanistan")
plot(st_geometry(af_cities_sf), pch = 20, col = "blue", main = "Kota di Afghanistan")
# 7. Tambah variabel dummy elevasi -------------------------------------------
set.seed(123)
af_cities_sf$elevation <- runif(nrow(af_cities_sf), 500, 3000)
# 8. Konversi sf → Spatial untuk gstat ---------------------------------------
af_cities_sp <- as(af_cities_sf, "Spatial")
# 9. Variogram & fitting -----------------------------------------------------
vgm_emp <- variogram(elevation ~ 1, data = af_cities_sp)
vgm_fit <- fit.variogram(
vgm_emp,
model = vgm(
psill  = max(vgm_emp$gamma, na.rm=TRUE)/2,
model  = "Sph",
range  = max(vgm_emp$dist,  na.rm=TRUE)/3,
nugget = min(vgm_emp$gamma, na.rm=TRUE)
)
)
plot(vgm_emp, vgm_fit, main = "Empirical & Fitted Variogram")
# 10. Buat grid prediksi dengan terra + raster -------------------------------
bb       <- st_bbox(af_cities_sf)
ext_af   <- ext(bb["xmin"] - 0.5, bb["xmax"] + 0.5,
bb["ymin"] - 0.5, bb["ymax"] + 0.5)
r_terra  <- rast(ext_af, resolution = 0.01, crs = crs(af_cities_sf))
r_raster <- raster(r_terra)
grid_sp  <- as(r_raster, "SpatialGridDataFrame")
# 11. Ordinary Kriging -------------------------------------------------------
krig_sp <- krige(
formula   = elevation ~ 1,
locations = af_cities_sp,
newdata   = grid_sp,
model     = vgm_fit
)
# 12. Konversi hasil ke raster terra -----------------------------------------
pred_rast <- rast(r_terra)
values(pred_rast) <- krig_sp$var1.pred
var_rast <- rast(r_terra)
values(var_rast) <- krig_sp$var1.var
# Beri nama layer supaya mudah nanti
names(pred_rast) <- "elevation_pred"
names(var_rast)  <- "elevation_var"
# 13. Plot hasil kriging -----------------------------------------------------
plot(pred_rast, main = "Elevasi (Ordinary Kriging)")
plot(var_rast,  main = "Variance Kriging")
# 14. Interpolasi alternatif: IDW ---------------------------------------------
idw_sp   <- idw(elevation ~ 1, af_cities_sp, newdata = grid_sp, idp = 2.5)
idw_rast <- rast(r_terra)
values(idw_rast) <- idw_sp$var1.pred
names(idw_rast) <- "elevation_idw"
plot(idw_rast, main = "Elevasi (IDW)")
# 15. Bandingkan Kriging vs IDW ----------------------------------------------
par(mfrow = c(1,2))
plot(pred_rast, main = "Kriging")
plot(idw_rast,  main = "IDW")
par(mfrow = c(1,1))
# 16. Visualisasi interaktif ------------------------------------------------
mapview(pred_rast, layer.name = "Kriging Elevasi") +
mapview(af_cities_sf, color = "red", cex = 5, layer.name = "Kota")
# 17. Validasi silang --------------------------------------------------------
cv <- krige.cv(elevation ~ 1, af_cities_sp, model = vgm_fit)
print(summary(cv))
plot(cv$observed, cv$pred,
main = "Observed vs Predicted",
xlab = "Observed", ylab = "Predicted")
abline(0,1, col = "red")
# 18. Peta akhir dengan ggplot2 ---------------------------------------------
# Konversi raster prediksi ke data.frame dengan kolom x, y, elevation_pred
pred_df <- as.data.frame(pred_rast, xy = TRUE, na.rm = TRUE)
ggplot(pred_df, aes(x = x, y = y, fill = elevation_pred)) +
geom_raster() +
geom_point(data = af_cities_sf,
aes(x = longitude, y = latitude),
color = "black", size = 1.5) +
scale_fill_viridis_c(name = "Elevasi (m)") +
coord_fixed() +
labs(title = "Interpolasi Elevasi di Afghanistan (Kriging)") +
theme_minimal()
# 0. Instalasi paket jika belum terpasang ------------------------------------
required_packages <- c(
"sf", "terra", "raster", "gstat", "ggplot2",
"dplyr", "mapview", "readr", "sp"
)
new_pkgs <- setdiff(required_packages, rownames(installed.packages()))
if (length(new_pkgs)) install.packages(new_pkgs)
# 1. Muat library ------------------------------------------------------------
library(sf)
library(terra)
library(raster)   # untuk koersi ke SpatialGridDataFrame
library(gstat)
library(ggplot2)
library(dplyr)
library(mapview)
library(readr)
library(sp)
# 2. Baca data ---------------------------------------------------------------
cities    <- read_csv("E:/jurnal sig/geolocation data/cities.csv")
countries <- read_csv("E:/jurnal sig/geolocation data/countries.csv")
states    <- read_csv("E:/jurnal sig/geolocation data/states.csv")
# 3. Bersihkan NA pada states ------------------------------------------------
states_clean <- states %>%
filter(!is.na(latitude) & !is.na(longitude))
cat("States: before =", nrow(states), "after =", nrow(states_clean), "\n")
# 4. Konversi ke sf ----------------------------------------------------------
cities_sf    <- st_as_sf(cities,     coords = c("longitude","latitude"), crs = 4326)
states_sf    <- st_as_sf(states_clean,coords = c("longitude","latitude"), crs = 4326)
countries_sf <- st_as_sf(countries,  coords = c("longitude","latitude"), crs = 4326)
# 5. Plot semua kota ---------------------------------------------------------
plot(st_geometry(cities_sf), pch = 20, col = "red", main = "Semua Kota")
# 6. Filter Afghanistan ------------------------------------------------------
af_cities_sf <- filter(cities_sf, country_name == "Afghanistan")
af_states_sf <- filter(states_sf,  country_name == "Afghanistan")
plot(st_geometry(af_cities_sf), pch = 20, col = "blue", main = "Kota di Afghanistan")
# 7. Tambah variabel dummy elevasi -------------------------------------------
set.seed(123)
af_cities_sf$elevation <- runif(nrow(af_cities_sf), 500, 3000)
# 8. Konversi sf → Spatial untuk gstat ---------------------------------------
af_cities_sp <- as(af_cities_sf, "Spatial")
# 9. Variogram & fitting -----------------------------------------------------
vgm_emp <- variogram(elevation ~ 1, data = af_cities_sp)
vgm_fit <- fit.variogram(
vgm_emp,
model = vgm(
psill  = max(vgm_emp$gamma, na.rm=TRUE)/2,
model  = "Sph",
range  = max(vgm_emp$dist,  na.rm=TRUE)/3,
nugget = min(vgm_emp$gamma, na.rm=TRUE)
)
)
plot(vgm_emp, vgm_fit, main = "Empirical & Fitted Variogram")
# 10. Buat grid prediksi dengan terra + raster -------------------------------
bb       <- st_bbox(af_cities_sf)
ext_af   <- ext(bb["xmin"] - 0.5, bb["xmax"] + 0.5,
bb["ymin"] - 0.5, bb["ymax"] + 0.5)
r_terra  <- rast(ext_af, resolution = 0.01, crs = crs(af_cities_sf))
r_raster <- raster(r_terra)
grid_sp  <- as(r_raster, "SpatialGridDataFrame")
# 11. Ordinary Kriging -------------------------------------------------------
krig_sp <- krige(
formula   = elevation ~ 1,
locations = af_cities_sp,
newdata   = grid_sp,
model     = vgm_fit
)
# 12. Konversi hasil ke raster terra -----------------------------------------
pred_rast <- rast(r_terra)
values(pred_rast) <- krig_sp$var1.pred
names(pred_rast) <- "elevation_pred"
var_rast <- rast(r_terra)
values(var_rast) <- krig_sp$var1.var
names(var_rast) <- "elevation_var"
# 13. Plot hasil kriging -----------------------------------------------------
plot(pred_rast, main = "Elevasi (Ordinary Kriging)")
plot(var_rast,  main = "Variance Kriging")
# 14. Interpolasi alternatif: IDW ---------------------------------------------
idw_sp   <- idw(elevation ~ 1, af_cities_sp, newdata = grid_sp, idp = 2.5)
idw_rast <- rast(r_terra)
values(idw_rast) <- idw_sp$var1.pred
names(idw_rast) <- "elevation_idw"
plot(idw_rast, main = "Elevasi (IDW)")
# 15. Bandingkan Kriging vs IDW ----------------------------------------------
par(mfrow = c(1,2))
plot(pred_rast, main = "Kriging")
plot(idw_rast,  main = "IDW")
par(mfrow = c(1,1))
# 16. Visualisasi interaktif ------------------------------------------------
mapview(pred_rast, layer.name = "Kriging Elevasi") +
mapview(af_cities_sf, color = "red", cex = 5, layer.name = "Kota")
# 17. Validasi silang --------------------------------------------------------
cv <- krige.cv(elevation ~ 1, af_cities_sp, model = vgm_fit)
print(summary(cv))
plot(cv$observed, cv$pred,
main = "Observed vs Predicted",
xlab = "Observed", ylab = "Predicted")
abline(0,1, col = "red")
# 18. Peta akhir dengan ggplot2 ---------------------------------------------
# Konversi raster prediksi ke data.frame
pred_df <- as.data.frame(pred_rast, xy = TRUE, na.rm = TRUE)
ggplot(pred_df, aes(x = x, y = y, fill = elevation_pred)) +
geom_raster() +
geom_sf(data = af_cities_sf, inherit.aes = FALSE,
color = "black", size = 1.2) +
scale_fill_viridis_c(name = "Elevasi (m)") +
coord_fixed() +
labs(title = "Interpolasi Elevasi di Afghanistan (Kriging)") +
theme_minimal()
# 0. Instalasi paket jika belum terpasang ------------------------------------
required_packages <- c(
"sf", "terra", "raster", "gstat", "ggplot2",
"dplyr", "mapview", "readr", "sp"
)
new_pkgs <- setdiff(required_packages, rownames(installed.packages()))
if (length(new_pkgs)) install.packages(new_pkgs)
# 1. Muat library ------------------------------------------------------------
library(sf)
library(terra)
library(raster)   # untuk koersi ke SpatialGridDataFrame
library(gstat)
library(ggplot2)
library(dplyr)
library(mapview)
library(readr)
library(sp)
# 2. Baca data ---------------------------------------------------------------
cities    <- read_csv("E:/jurnal sig/geolocation data/cities.csv")
countries <- read_csv("E:/jurnal sig/geolocation data/countries.csv")
states    <- read_csv("E:/jurnal sig/geolocation data/states.csv")
# 3. Bersihkan NA pada states ------------------------------------------------
states_clean <- states %>%
filter(!is.na(latitude) & !is.na(longitude))
cat("States: before =", nrow(states), "after =", nrow(states_clean), "\n")
# 4. Konversi ke sf ----------------------------------------------------------
cities_sf    <- st_as_sf(cities,     coords = c("longitude","latitude"), crs = 4326)
states_sf    <- st_as_sf(states_clean,coords = c("longitude","latitude"), crs = 4326)
countries_sf <- st_as_sf(countries,  coords = c("longitude","latitude"), crs = 4326)
# 5. Plot semua kota ---------------------------------------------------------
plot(st_geometry(cities_sf), pch = 20, col = "red", main = "Semua Kota")
# 6. Filter Afghanistan ------------------------------------------------------
af_cities_sf <- filter(cities_sf, country_name == "Afghanistan")
af_states_sf <- filter(states_sf,  country_name == "Afghanistan")
plot(st_geometry(af_cities_sf), pch = 20, col = "blue", main = "Kota di Afghanistan")
# 7. Tambah variabel dummy elevasi -------------------------------------------
set.seed(123)
af_cities_sf$elevation <- runif(nrow(af_cities_sf), 500, 3000)
# 8. Konversi sf → Spatial untuk gstat ---------------------------------------
af_cities_sp <- as(af_cities_sf, "Spatial")
# 9. Variogram & fitting -----------------------------------------------------
vgm_emp <- variogram(elevation ~ 1, data = af_cities_sp)
vgm_fit <- fit.variogram(
vgm_emp,
model = vgm(
psill  = max(vgm_emp$gamma, na.rm=TRUE)/2,
model  = "Sph",
range  = max(vgm_emp$dist,  na.rm=TRUE)/3,
nugget = min(vgm_emp$gamma, na.rm=TRUE)
)
)
plot(vgm_emp, vgm_fit, main = "Empirical & Fitted Variogram")
# 10. Buat grid prediksi dengan terra + raster -------------------------------
bb       <- st_bbox(af_cities_sf)
ext_af   <- ext(bb["xmin"] - 0.5, bb["xmax"] + 0.5,
bb["ymin"] - 0.5, bb["ymax"] + 0.5)
r_terra  <- rast(ext_af, resolution = 0.01, crs = crs(af_cities_sf))
r_raster <- raster(r_terra)
grid_sp  <- as(r_raster, "SpatialGridDataFrame")
# 11. Ordinary Kriging -------------------------------------------------------
krig_sp <- krige(
formula   = elevation ~ 1,
locations = af_cities_sp,
newdata   = grid_sp,
model     = vgm_fit
)
# 12. Konversi hasil ke raster terra -----------------------------------------
pred_rast <- rast(r_terra)
values(pred_rast) <- krig_sp$var1.pred
names(pred_rast) <- "elevation_pred"
var_rast <- rast(r_terra)
values(var_rast) <- krig_sp$var1.var
names(var_rast) <- "elevation_var"
# 13. Plot hasil kriging -----------------------------------------------------
plot(pred_rast, main = "Elevasi (Ordinary Kriging)")
plot(var_rast,  main = "Variance Kriging")
# 14. Interpolasi alternatif: IDW ---------------------------------------------
idw_sp   <- idw(elevation ~ 1, af_cities_sp, newdata = grid_sp, idp = 2.5)
idw_rast <- rast(r_terra)
values(idw_rast) <- idw_sp$var1.pred
names(idw_rast) <- "elevation_idw"
plot(idw_rast, main = "Elevasi (IDW)")
# 15. Bandingkan Kriging vs IDW ----------------------------------------------
par(mfrow = c(1,2))
plot(pred_rast, main = "Kriging")
plot(idw_rast,  main = "IDW")
par(mfrow = c(1,1))
# 16. Visualisasi interaktif ------------------------------------------------
mapview(pred_rast, layer.name = "Kriging Elevasi") +
mapview(af_cities_sf, color = "red", cex = 5, layer.name = "Kota")
# 17. Validasi silang --------------------------------------------------------
cv <- krige.cv(elevation ~ 1, af_cities_sp, model = vgm_fit)
print(summary(cv))
plot(cv$observed, cv$pred,
main = "Observed vs Predicted",
xlab = "Observed", ylab = "Predicted")
abline(0,1, col = "red")
# 18. Peta akhir dengan ggplot2 ---------------------------------------------
# Konversi raster prediksi ke data.frame
pred_df <- as.data.frame(pred_rast, xy = TRUE, na.rm = TRUE)
ggplot() +
geom_raster(data = pred_df,
aes(x = x, y = y, fill = elevation_pred)) +
geom_sf(data = af_cities_sf, inherit.aes = FALSE,
color = "black", size = 1.2) +
scale_fill_viridis_c(name = "Elevasi (m)") +
coord_sf() +
labs(title = "Interpolasi Elevasi di Afghanistan (Kriging)") +
theme_minimal()
# 19. Simpan hasil -----------------------------------------------------------
dir.create("E:/jurnal sig/hasil", showWarnings = FALSE)
writeRaster(pred_rast, "E:/jurnal sig/hasil/afghanistan_kriging.tif", overwrite = TRUE)
writeRaster(idw_rast,  "E:/jurnal sig/hasil/afghanistan_idw.tif",    overwrite = TRUE)
ggsave("E:/jurnal sig/hasil/afghanistan_elevation_map.png",
width = 12, height = 8, dpi = 300)
